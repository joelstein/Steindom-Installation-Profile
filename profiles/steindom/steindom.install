<?php

/**
 * Implements hook_install().
 */
function steindom_install() {
  // Add Full HTML format.
  $full_html_format = (object) array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 0,
    'filters' => array(
      // Image Resize Filter.
      'image_resize_filter' => array(
        'status' => 1,
      ),
    ),
  );
  filter_format_save($full_html_format);

  // Add Full HTML, no WYSIWYG format.
  $full_html_no_wysiwyg_format = (object) array(
    'format' => 'full_html_no_wysiwyg',
    'name' => 'Full HTML, no WYSIWYG',
    'weight' => 1,
    'filters' => array(
      // Image Resize Filter.
      'image_resize_filter' => array(
        'status' => 1,
      ),
    ),
  );
  filter_format_save($full_html_no_wysiwyg_format);

  // Add Filtered HTML format.
  $filtered_html_format = (object) array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 2,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // Image Resize Filter.
      'image_resize_filter' => array(
        'weight' => 9,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  filter_format_save($filtered_html_format);

  // Enable system main and help blocks.
  $default_theme = variable_get('theme_default', 'bartik');
  $values = array(
    array(
      'module' => 'system',
      'delta' => 'main',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'content',
      'pages' => '',
      'cache' => -1,
    ),
    array(
      'module' => 'system',
      'delta' => 'help',
      'theme' => $default_theme,
      'status' => 1,
      'weight' => 0,
      'region' => 'help',
      'pages' => '',
      'cache' => -1,
    ),
  );
  $query = db_insert('block')->fields(array('module', 'delta', 'theme', 'status', 'weight', 'region', 'pages', 'cache'));
  foreach ($values as $record) {
    $query->values($record);
  }
  $query->execute();

  // Create Page and Article node types.
  $types = array(
    array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
    array(
      'type' => 'article',
      'name' => st('Article'),
      'base' => 'node_content',
      'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );
  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Configure "Basic page".
  // - don't promote to front page, but do create a new revision.
  variable_set('node_options_page', array('status', 'revision'));
  // - disable comments.
  variable_set('comment_page', COMMENT_NODE_HIDDEN);
  // - don't display date and author information.
  variable_set('node_submitted_page', FALSE);

  // Configure "Article".
  // - create a new revision.
  variable_set('node_options_article', array('status', 'promote', 'revision'));

  // Restrict user registration to administrators only.
  variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval', $filtered_html_permission));

  // Create "administrator" role.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);

  // Grant "administrator" role all permissions.
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));

  // Set "administrator" role as *the* administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a Home link in the main menu.
  $item = array(
    'link_title' => st('Home'),
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
  );
  menu_link_save($item);

  // Update the menu router information.
  menu_rebuild();

  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'seven')
    ->execute();
  variable_set('admin_theme', 'seven');
  variable_set('node_admin_theme', '1');

  // Configure date and time formats.
  variable_set('date_format_long', 'l, F j, Y - g:ia');
  variable_set('date_format_medium', 'D, Y/m/d - g:ia');
  variable_set('date_format_short', 'Y/m/d - g:ia');

  // Configure LoginToboggan.
  variable_set('logintoboggan_login_with_email', 1);
  variable_set('logintoboggan_login_successful_message', 1);
  variable_set('logintoboggan_minimum_password_length', 6);
  variable_set('site_403', 'toboggan/denied');

  // Configure Views.
  variable_set('views_ui_show_advanced_help_warning', 0);
  variable_set('views_ui_show_master_display', 1);
  variable_set('views_ui_show_advanced_column', 1);
  variable_set('views_ui_always_live_preview', 0);

  // Configure Mollom.
  variable_set('mollom_fallback', 1);
  variable_set('mollom_privacy_link', 0);

  // Protect site-wide contact form with Mollom.
  $mollom_form = array(
    'form_id' => 'contact_site_form',
    'mode' => 2,
    'checks' => array('spam', 'profanity'),
    'discard' => 1,
    'enabled_fields' => array('subject', 'message'),
    'strictness' => 'strict',
    'module' => 'contact',
  );
  mollom_form_save($mollom_form);

  // Protect password request form with Mollom.
  $mollom_form = array(
    'form_id' => 'user_pass',
    'mode' => 1,
    'module' => 'user',
  );
  mollom_form_save($mollom_form);

  // Configure Google Analytics to only appear for anonymous users.
  variable_set('googleanalytics_roles', array(1 => 1));

  // Configure WYSIWYG to use CKEditor.
  db_merge('wysiwyg')
    ->key(array('format' => 'full_html'))
    ->fields(array(
      'editor' => 'ckeditor',
    ))
    ->execute();
  $profile = array(
    'default' => 1,
    'user_choose' => 0,
    'show_toggle' => 1,
    'theme' => 'advanced',
    'language' => 'en',
    'buttons' => array(
      'default' => array(
        'Bold' => 1,
        'Italic' => 1,
        'Underline' => 1,
        'Strike' => 1,
        'JustifyLeft' => 1,
        'JustifyCenter' => 1,
        'JustifyRight' => 1,
        'JustifyBlock' => 1,
        'BulletedList' => 1,
        'NumberedList' => 1,
        'Outdent' => 1,
        'Indent' => 1,
        'Undo' => 1,
        'Redo' => 1,
        'Link' => 1,
        'Unlink' => 1,
        'Anchor' => 1,
        'Image' => 1,
        'TextColor' => 1,
        'BGColor' => 1,
        'Superscript' => 1,
        'Subscript' => 1,
        'Blockquote' => 1,
        'HorizontalRule' => 1,
        'Cut' => 1,
        'Copy' => 1,
        'Paste' => 1,
        'PasteText' => 1,
        'PasteFromWord' => 1,
        'ShowBlocks' => 1,
        'RemoveFormat' => 1,
        'Format' => 1,
        'Font' => 1,
        'FontSize' => 1,
        'Styles' => 1,
        'Table' => 1,
        'SelectAll' => 1,
        'Find' => 1,
        'Replace' => 1,
        'Flash' => 1,
      ),
      'imce' => array(
        'imce' => 1,
      ),
      'drupal' => array(
        'break' => 1,
      ),
    ),
    'toolbar_loc' => 'top',
    'toolbar_align' => 'left',
    'path_loc' => 'bottom',
    'resizing' => 1,
    'verify_html' => 1,
    'preformatted' => 0,
    'convert_fonts_to_spans' => 1,
    'remove_linebreaks' => 0,
    'apply_source_formatting' => 1,
    'paste_auto_cleanup_on_paste' => 0,
    'block_formats' => 'p,address,pre,h2,h3,h4,h5,h6,div',
    'css_setting' => 'none',
    'css_path' => '',
    'css_classes' => '',
  );
  db_merge('wysiwyg')
    ->key(array('format' => 'full_html'))
    ->fields(array(
      'editor' => 'ckeditor',
      'settings' => serialize($profile),
    ))
    ->execute();
  wysiwyg_profile_cache_clear();

  // Configure Pathauto.
  variable_set('pathauto_node_article_pattern', 'articles/[node:title]');
  variable_set('pathauto_node_page_pattern', '[node:title]');
  variable_set('pathauto_user_pattern', '');

  // Disable core's "poor man's cron".
  variable_set('cron_safe_threshold', 0);

  // Configure Boost (and delete auto-generated cache folder).
  variable_set('boost_root_cache_dir', 'sites/default/files/boost');
  file_unmanaged_delete_recursive('cache');

  // Grant anonymous and authenticated users the ability to search content.
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('search content'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('search content'));

  // Grant anonymous and authenticated users the ability to use site-wide
  // contact form.
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access site-wide contact form'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access site-wide contact form'));

  // Configure module update notification settings.
  variable_set('update_check_frequency', 7);
  variable_set('update_notification_threshold', 'security');

  // Create sitewide context, with "system help" and "main page content" blocks
  // in appropriate regions.
  $context = new stdClass;
  $context->disabled = FALSE; /* Edit this to true to make a default context disabled initially */
  $context->api_version = 3;
  $context->name = 'sitewide';
  $context->description = '';
  $context->tag = '';
  $context->conditions = array(
    'sitewide' => array(
      'values' => array(
        1 => 1,
      ),
    ),
  );
  $context->reactions = array(
    'block' => array(
      'blocks' => array(
        'system-help' => array(
          'module' => 'system',
          'delta' => 'help',
          'region' => 'help',
          'weight' => '-10',
        ),
        'system-main' => array(
          'module' => 'system',
          'delta' => 'main',
          'region' => 'content',
          'weight' => '-10',
        ),
      ),
    ),
  );
  $context->condition_mode = 0;
  context_save($context);

  // Change "Sample profile" IMCE profile to "Assets".
  module_load_include('inc', 'imce', 'inc/imce.admin');
  imce_update_profiles(2, array(
    'name' => 'Assets',
    'usertab' => 1,
    'filesize' => '0',
    'quota' => '0',
    'tuquota' => '0',
    'extensions' => '*',
    'dimensions' => '1200x1200',
    'filenum' => '0',
    'directories' => array(
      array(
        'name' => 'assets',
        'subnav' => 1,
        'browse' => 1,
        'upload' => 1,
        'thumb' => 1,
        'delete' => 1,
        'resize' => 1,
      ),
    ),
    'thumbnails' => array(),
  ));

  // Configure IMCE to map Assets profile to administrator role.
  variable_set('imce_roles_profiles', array(
    3 => array('public_pid' => '2'),
    2 => array('public_pid' => 0),
    1 => array('public_pid' => 0),
  ));

  // Set tmp directory.
  variable_set('file_temporary_path', '/tmp');
}
